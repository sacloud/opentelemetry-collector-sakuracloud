// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"time"

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver"
)

type metricSakuracloudServerCPUTime struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills sakuracloud.server.cpu_time metric with initial data.
func (m *metricSakuracloudServerCPUTime) init() {
	m.data.SetName("sakuracloud.server.cpu_time")
	m.data.SetDescription("CPU usage time per core in milliseconds. Values range from 0 to 1000")
	m.data.SetUnit("ms")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricSakuracloudServerCPUTime) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val float64, sakuracloudServerIDAttributeValue string, sakuracloudServerNameAttributeValue string, sakuracloudServerZoneAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleValue(val)
	dp.Attributes().PutStr("sakuracloud.server.id", sakuracloudServerIDAttributeValue)
	dp.Attributes().PutStr("sakuracloud.server.name", sakuracloudServerNameAttributeValue)
	dp.Attributes().PutStr("sakuracloud.server.zone", sakuracloudServerZoneAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricSakuracloudServerCPUTime) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricSakuracloudServerCPUTime) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricSakuracloudServerCPUTime(cfg MetricConfig) metricSakuracloudServerCPUTime {
	m := metricSakuracloudServerCPUTime{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricSakuracloudServerDiskRead struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills sakuracloud.server.disk.read metric with initial data.
func (m *metricSakuracloudServerDiskRead) init() {
	m.data.SetName("sakuracloud.server.disk.read")
	m.data.SetDescription("Disk read throughput per server")
	m.data.SetUnit("bps")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricSakuracloudServerDiskRead) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val float64, sakuracloudServerIDAttributeValue string, sakuracloudServerNameAttributeValue string, sakuracloudServerZoneAttributeValue string, sakuracloudServerDiskIDAttributeValue string, sakuracloudServerDiskIndexAttributeValue int64) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleValue(val)
	dp.Attributes().PutStr("sakuracloud.server.id", sakuracloudServerIDAttributeValue)
	dp.Attributes().PutStr("sakuracloud.server.name", sakuracloudServerNameAttributeValue)
	dp.Attributes().PutStr("sakuracloud.server.zone", sakuracloudServerZoneAttributeValue)
	dp.Attributes().PutStr("sakuracloud.server.disk_id", sakuracloudServerDiskIDAttributeValue)
	dp.Attributes().PutInt("sakuracloud.server.disk_index", sakuracloudServerDiskIndexAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricSakuracloudServerDiskRead) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricSakuracloudServerDiskRead) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricSakuracloudServerDiskRead(cfg MetricConfig) metricSakuracloudServerDiskRead {
	m := metricSakuracloudServerDiskRead{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricSakuracloudServerDiskWrite struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills sakuracloud.server.disk.write metric with initial data.
func (m *metricSakuracloudServerDiskWrite) init() {
	m.data.SetName("sakuracloud.server.disk.write")
	m.data.SetDescription("Disk write throughput per server")
	m.data.SetUnit("bps")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricSakuracloudServerDiskWrite) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val float64, sakuracloudServerIDAttributeValue string, sakuracloudServerNameAttributeValue string, sakuracloudServerZoneAttributeValue string, sakuracloudServerDiskIDAttributeValue string, sakuracloudServerDiskIndexAttributeValue int64) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleValue(val)
	dp.Attributes().PutStr("sakuracloud.server.id", sakuracloudServerIDAttributeValue)
	dp.Attributes().PutStr("sakuracloud.server.name", sakuracloudServerNameAttributeValue)
	dp.Attributes().PutStr("sakuracloud.server.zone", sakuracloudServerZoneAttributeValue)
	dp.Attributes().PutStr("sakuracloud.server.disk_id", sakuracloudServerDiskIDAttributeValue)
	dp.Attributes().PutInt("sakuracloud.server.disk_index", sakuracloudServerDiskIndexAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricSakuracloudServerDiskWrite) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricSakuracloudServerDiskWrite) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricSakuracloudServerDiskWrite(cfg MetricConfig) metricSakuracloudServerDiskWrite {
	m := metricSakuracloudServerDiskWrite{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricSakuracloudServerNetworkInterfaceReceive struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills sakuracloud.server.network_interface.receive metric with initial data.
func (m *metricSakuracloudServerNetworkInterfaceReceive) init() {
	m.data.SetName("sakuracloud.server.network_interface.receive")
	m.data.SetDescription("Network interface incoming traffic per NIC")
	m.data.SetUnit("bps")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricSakuracloudServerNetworkInterfaceReceive) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val float64, sakuracloudServerIDAttributeValue string, sakuracloudServerNameAttributeValue string, sakuracloudServerZoneAttributeValue string, sakuracloudServerInterfaceIDAttributeValue string, sakuracloudServerInterfaceIndexAttributeValue int64) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleValue(val)
	dp.Attributes().PutStr("sakuracloud.server.id", sakuracloudServerIDAttributeValue)
	dp.Attributes().PutStr("sakuracloud.server.name", sakuracloudServerNameAttributeValue)
	dp.Attributes().PutStr("sakuracloud.server.zone", sakuracloudServerZoneAttributeValue)
	dp.Attributes().PutStr("sakuracloud.server.interface_id", sakuracloudServerInterfaceIDAttributeValue)
	dp.Attributes().PutInt("sakuracloud.server.interface_index", sakuracloudServerInterfaceIndexAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricSakuracloudServerNetworkInterfaceReceive) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricSakuracloudServerNetworkInterfaceReceive) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricSakuracloudServerNetworkInterfaceReceive(cfg MetricConfig) metricSakuracloudServerNetworkInterfaceReceive {
	m := metricSakuracloudServerNetworkInterfaceReceive{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricSakuracloudServerNetworkInterfaceSend struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills sakuracloud.server.network_interface.send metric with initial data.
func (m *metricSakuracloudServerNetworkInterfaceSend) init() {
	m.data.SetName("sakuracloud.server.network_interface.send")
	m.data.SetDescription("Network interface outgoing traffic per NIC")
	m.data.SetUnit("bps")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricSakuracloudServerNetworkInterfaceSend) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val float64, sakuracloudServerIDAttributeValue string, sakuracloudServerNameAttributeValue string, sakuracloudServerZoneAttributeValue string, sakuracloudServerInterfaceIDAttributeValue string, sakuracloudServerInterfaceIndexAttributeValue int64) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleValue(val)
	dp.Attributes().PutStr("sakuracloud.server.id", sakuracloudServerIDAttributeValue)
	dp.Attributes().PutStr("sakuracloud.server.name", sakuracloudServerNameAttributeValue)
	dp.Attributes().PutStr("sakuracloud.server.zone", sakuracloudServerZoneAttributeValue)
	dp.Attributes().PutStr("sakuracloud.server.interface_id", sakuracloudServerInterfaceIDAttributeValue)
	dp.Attributes().PutInt("sakuracloud.server.interface_index", sakuracloudServerInterfaceIndexAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricSakuracloudServerNetworkInterfaceSend) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricSakuracloudServerNetworkInterfaceSend) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricSakuracloudServerNetworkInterfaceSend(cfg MetricConfig) metricSakuracloudServerNetworkInterfaceSend {
	m := metricSakuracloudServerNetworkInterfaceSend{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricSakuracloudServerUp struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills sakuracloud.server.up metric with initial data.
func (m *metricSakuracloudServerUp) init() {
	m.data.SetName("sakuracloud.server.up")
	m.data.SetDescription("Indicates whether a server is up (1) or down (0)")
	m.data.SetUnit("")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricSakuracloudServerUp) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, sakuracloudServerIDAttributeValue string, sakuracloudServerNameAttributeValue string, sakuracloudServerZoneAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("sakuracloud.server.id", sakuracloudServerIDAttributeValue)
	dp.Attributes().PutStr("sakuracloud.server.name", sakuracloudServerNameAttributeValue)
	dp.Attributes().PutStr("sakuracloud.server.zone", sakuracloudServerZoneAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricSakuracloudServerUp) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricSakuracloudServerUp) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricSakuracloudServerUp(cfg MetricConfig) metricSakuracloudServerUp {
	m := metricSakuracloudServerUp{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

// MetricsBuilder provides an interface for scrapers to report metrics while taking care of all the transformations
// required to produce metric representation defined in metadata and user config.
type MetricsBuilder struct {
	config                                         MetricsBuilderConfig // config of the metrics builder.
	startTime                                      pcommon.Timestamp    // start time that will be applied to all recorded data points.
	metricsCapacity                                int                  // maximum observed number of metrics per resource.
	metricsBuffer                                  pmetric.Metrics      // accumulates metrics data before emitting.
	buildInfo                                      component.BuildInfo  // contains version information.
	metricSakuracloudServerCPUTime                 metricSakuracloudServerCPUTime
	metricSakuracloudServerDiskRead                metricSakuracloudServerDiskRead
	metricSakuracloudServerDiskWrite               metricSakuracloudServerDiskWrite
	metricSakuracloudServerNetworkInterfaceReceive metricSakuracloudServerNetworkInterfaceReceive
	metricSakuracloudServerNetworkInterfaceSend    metricSakuracloudServerNetworkInterfaceSend
	metricSakuracloudServerUp                      metricSakuracloudServerUp
}

// MetricBuilderOption applies changes to default metrics builder.
type MetricBuilderOption interface {
	apply(*MetricsBuilder)
}

type metricBuilderOptionFunc func(mb *MetricsBuilder)

func (mbof metricBuilderOptionFunc) apply(mb *MetricsBuilder) {
	mbof(mb)
}

// WithStartTime sets startTime on the metrics builder.
func WithStartTime(startTime pcommon.Timestamp) MetricBuilderOption {
	return metricBuilderOptionFunc(func(mb *MetricsBuilder) {
		mb.startTime = startTime
	})
}

func NewMetricsBuilder(mbc MetricsBuilderConfig, settings receiver.Settings, options ...MetricBuilderOption) *MetricsBuilder {
	mb := &MetricsBuilder{
		config:                           mbc,
		startTime:                        pcommon.NewTimestampFromTime(time.Now()),
		metricsBuffer:                    pmetric.NewMetrics(),
		buildInfo:                        settings.BuildInfo,
		metricSakuracloudServerCPUTime:   newMetricSakuracloudServerCPUTime(mbc.Metrics.SakuracloudServerCPUTime),
		metricSakuracloudServerDiskRead:  newMetricSakuracloudServerDiskRead(mbc.Metrics.SakuracloudServerDiskRead),
		metricSakuracloudServerDiskWrite: newMetricSakuracloudServerDiskWrite(mbc.Metrics.SakuracloudServerDiskWrite),
		metricSakuracloudServerNetworkInterfaceReceive: newMetricSakuracloudServerNetworkInterfaceReceive(mbc.Metrics.SakuracloudServerNetworkInterfaceReceive),
		metricSakuracloudServerNetworkInterfaceSend:    newMetricSakuracloudServerNetworkInterfaceSend(mbc.Metrics.SakuracloudServerNetworkInterfaceSend),
		metricSakuracloudServerUp:                      newMetricSakuracloudServerUp(mbc.Metrics.SakuracloudServerUp),
	}

	for _, op := range options {
		op.apply(mb)
	}
	return mb
}

// updateCapacity updates max length of metrics and resource attributes that will be used for the slice capacity.
func (mb *MetricsBuilder) updateCapacity(rm pmetric.ResourceMetrics) {
	if mb.metricsCapacity < rm.ScopeMetrics().At(0).Metrics().Len() {
		mb.metricsCapacity = rm.ScopeMetrics().At(0).Metrics().Len()
	}
}

// ResourceMetricsOption applies changes to provided resource metrics.
type ResourceMetricsOption interface {
	apply(pmetric.ResourceMetrics)
}

type resourceMetricsOptionFunc func(pmetric.ResourceMetrics)

func (rmof resourceMetricsOptionFunc) apply(rm pmetric.ResourceMetrics) {
	rmof(rm)
}

// WithResource sets the provided resource on the emitted ResourceMetrics.
// It's recommended to use ResourceBuilder to create the resource.
func WithResource(res pcommon.Resource) ResourceMetricsOption {
	return resourceMetricsOptionFunc(func(rm pmetric.ResourceMetrics) {
		res.CopyTo(rm.Resource())
	})
}

// WithStartTimeOverride overrides start time for all the resource metrics data points.
// This option should be only used if different start time has to be set on metrics coming from different resources.
func WithStartTimeOverride(start pcommon.Timestamp) ResourceMetricsOption {
	return resourceMetricsOptionFunc(func(rm pmetric.ResourceMetrics) {
		var dps pmetric.NumberDataPointSlice
		metrics := rm.ScopeMetrics().At(0).Metrics()
		for i := 0; i < metrics.Len(); i++ {
			switch metrics.At(i).Type() {
			case pmetric.MetricTypeGauge:
				dps = metrics.At(i).Gauge().DataPoints()
			case pmetric.MetricTypeSum:
				dps = metrics.At(i).Sum().DataPoints()
			}
			for j := 0; j < dps.Len(); j++ {
				dps.At(j).SetStartTimestamp(start)
			}
		}
	})
}

// EmitForResource saves all the generated metrics under a new resource and updates the internal state to be ready for
// recording another set of data points as part of another resource. This function can be helpful when one scraper
// needs to emit metrics from several resources. Otherwise calling this function is not required,
// just `Emit` function can be called instead.
// Resource attributes should be provided as ResourceMetricsOption arguments.
func (mb *MetricsBuilder) EmitForResource(options ...ResourceMetricsOption) {
	rm := pmetric.NewResourceMetrics()
	ils := rm.ScopeMetrics().AppendEmpty()
	ils.Scope().SetName("github.com/sacloud/opentelemetry-collector-sakuracloud/receiver/sakuracloudreceiver")
	ils.Scope().SetVersion(mb.buildInfo.Version)
	ils.Metrics().EnsureCapacity(mb.metricsCapacity)
	mb.metricSakuracloudServerCPUTime.emit(ils.Metrics())
	mb.metricSakuracloudServerDiskRead.emit(ils.Metrics())
	mb.metricSakuracloudServerDiskWrite.emit(ils.Metrics())
	mb.metricSakuracloudServerNetworkInterfaceReceive.emit(ils.Metrics())
	mb.metricSakuracloudServerNetworkInterfaceSend.emit(ils.Metrics())
	mb.metricSakuracloudServerUp.emit(ils.Metrics())

	for _, op := range options {
		op.apply(rm)
	}

	if ils.Metrics().Len() > 0 {
		mb.updateCapacity(rm)
		rm.MoveTo(mb.metricsBuffer.ResourceMetrics().AppendEmpty())
	}
}

// Emit returns all the metrics accumulated by the metrics builder and updates the internal state to be ready for
// recording another set of metrics. This function will be responsible for applying all the transformations required to
// produce metric representation defined in metadata and user config, e.g. delta or cumulative.
func (mb *MetricsBuilder) Emit(options ...ResourceMetricsOption) pmetric.Metrics {
	mb.EmitForResource(options...)
	metrics := mb.metricsBuffer
	mb.metricsBuffer = pmetric.NewMetrics()
	return metrics
}

// RecordSakuracloudServerCPUTimeDataPoint adds a data point to sakuracloud.server.cpu_time metric.
func (mb *MetricsBuilder) RecordSakuracloudServerCPUTimeDataPoint(ts pcommon.Timestamp, val float64, sakuracloudServerIDAttributeValue string, sakuracloudServerNameAttributeValue string, sakuracloudServerZoneAttributeValue string) {
	mb.metricSakuracloudServerCPUTime.recordDataPoint(mb.startTime, ts, val, sakuracloudServerIDAttributeValue, sakuracloudServerNameAttributeValue, sakuracloudServerZoneAttributeValue)
}

// RecordSakuracloudServerDiskReadDataPoint adds a data point to sakuracloud.server.disk.read metric.
func (mb *MetricsBuilder) RecordSakuracloudServerDiskReadDataPoint(ts pcommon.Timestamp, val float64, sakuracloudServerIDAttributeValue string, sakuracloudServerNameAttributeValue string, sakuracloudServerZoneAttributeValue string, sakuracloudServerDiskIDAttributeValue string, sakuracloudServerDiskIndexAttributeValue int64) {
	mb.metricSakuracloudServerDiskRead.recordDataPoint(mb.startTime, ts, val, sakuracloudServerIDAttributeValue, sakuracloudServerNameAttributeValue, sakuracloudServerZoneAttributeValue, sakuracloudServerDiskIDAttributeValue, sakuracloudServerDiskIndexAttributeValue)
}

// RecordSakuracloudServerDiskWriteDataPoint adds a data point to sakuracloud.server.disk.write metric.
func (mb *MetricsBuilder) RecordSakuracloudServerDiskWriteDataPoint(ts pcommon.Timestamp, val float64, sakuracloudServerIDAttributeValue string, sakuracloudServerNameAttributeValue string, sakuracloudServerZoneAttributeValue string, sakuracloudServerDiskIDAttributeValue string, sakuracloudServerDiskIndexAttributeValue int64) {
	mb.metricSakuracloudServerDiskWrite.recordDataPoint(mb.startTime, ts, val, sakuracloudServerIDAttributeValue, sakuracloudServerNameAttributeValue, sakuracloudServerZoneAttributeValue, sakuracloudServerDiskIDAttributeValue, sakuracloudServerDiskIndexAttributeValue)
}

// RecordSakuracloudServerNetworkInterfaceReceiveDataPoint adds a data point to sakuracloud.server.network_interface.receive metric.
func (mb *MetricsBuilder) RecordSakuracloudServerNetworkInterfaceReceiveDataPoint(ts pcommon.Timestamp, val float64, sakuracloudServerIDAttributeValue string, sakuracloudServerNameAttributeValue string, sakuracloudServerZoneAttributeValue string, sakuracloudServerInterfaceIDAttributeValue string, sakuracloudServerInterfaceIndexAttributeValue int64) {
	mb.metricSakuracloudServerNetworkInterfaceReceive.recordDataPoint(mb.startTime, ts, val, sakuracloudServerIDAttributeValue, sakuracloudServerNameAttributeValue, sakuracloudServerZoneAttributeValue, sakuracloudServerInterfaceIDAttributeValue, sakuracloudServerInterfaceIndexAttributeValue)
}

// RecordSakuracloudServerNetworkInterfaceSendDataPoint adds a data point to sakuracloud.server.network_interface.send metric.
func (mb *MetricsBuilder) RecordSakuracloudServerNetworkInterfaceSendDataPoint(ts pcommon.Timestamp, val float64, sakuracloudServerIDAttributeValue string, sakuracloudServerNameAttributeValue string, sakuracloudServerZoneAttributeValue string, sakuracloudServerInterfaceIDAttributeValue string, sakuracloudServerInterfaceIndexAttributeValue int64) {
	mb.metricSakuracloudServerNetworkInterfaceSend.recordDataPoint(mb.startTime, ts, val, sakuracloudServerIDAttributeValue, sakuracloudServerNameAttributeValue, sakuracloudServerZoneAttributeValue, sakuracloudServerInterfaceIDAttributeValue, sakuracloudServerInterfaceIndexAttributeValue)
}

// RecordSakuracloudServerUpDataPoint adds a data point to sakuracloud.server.up metric.
func (mb *MetricsBuilder) RecordSakuracloudServerUpDataPoint(ts pcommon.Timestamp, val int64, sakuracloudServerIDAttributeValue string, sakuracloudServerNameAttributeValue string, sakuracloudServerZoneAttributeValue string) {
	mb.metricSakuracloudServerUp.recordDataPoint(mb.startTime, ts, val, sakuracloudServerIDAttributeValue, sakuracloudServerNameAttributeValue, sakuracloudServerZoneAttributeValue)
}

// Reset resets metrics builder to its initial state. It should be used when external metrics source is restarted,
// and metrics builder should update its startTime and reset it's internal state accordingly.
func (mb *MetricsBuilder) Reset(options ...MetricBuilderOption) {
	mb.startTime = pcommon.NewTimestampFromTime(time.Now())
	for _, op := range options {
		op.apply(mb)
	}
}
